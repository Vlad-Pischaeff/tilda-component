{"version":3,"sources":["../src/TildaComponent.tsx","../src/TildaComponent.module.scss"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport styles from \"./TildaComponent.module.scss\";\n\nexport type Tilda = {\n  css: string[];\n  js: string[];\n  promoBlockId: number;\n  content: string;\n};\n\ntype BlobProps = {\n  cssArr: string[];\n  jsArr: string[];\n  id: number;\n};\n\ntype IframeElement = HTMLIFrameElement & {\n  initHTML?: () => string;\n};\n\ntype Props = {\n  tilda: Tilda;\n  className?: string;\n  onError?: () => void;\n};\n\nexport const TildaComponent = ({ tilda, className, onError }: Props) => {\n  const ref = useRef<IframeElement>(null);\n\n  const getGeneratedPageURL = ({ cssArr, jsArr, id }: BlobProps) => {\n    const getBlobURL = (code: string, type: string) => {\n      const blob = new Blob([code], { type });\n      return URL.createObjectURL(blob);\n    };\n\n    const getCSS = (cssArray: string[]) =>\n      cssArray\n        .map(css => `<link rel=\"stylesheet\" type=\"text/css\" href=\"${css}\" />`)\n        .join(' ');\n\n    const getJS = (jsArray: string[]) =>\n      jsArray\n        .map(js => `<script src=\"${js}\" blocking=\"render\"></script>`)\n        .join(' ');\n\n    const source = `\n      <html>\n        <head>\n          ${getCSS(cssArr)}\n          ${getJS(jsArr)}\n        </head>\n        <body style=\"overflow: hidden\">\n          <div id=\"tilda\">tilda body content</div>\n          <script>\n            const EL = document.getElementById('tilda');\n            const IFRAME = window.parent.document.getElementById('iframe${id}');\n            const setHTML = (html) => {\n              const range = document.createRange();\n              range.selectNode(EL);\n              const documentFragment = range.createContextualFragment(html);\n              EL.innerHTML = '';\n              EL.append(documentFragment);\n            };\n            document.onreadystatechange = () => {\n              if (document.readyState === \"complete\") {\n                const html = IFRAME.initHTML();\n                setHTML(html);\n              }\n            };\n            const resizeObserver = new ResizeObserver((entries) => {\n              for (const entry of entries) {\n                IFRAME.style.height = entry.target.clientHeight + 30 +'px';\n              }\n            });\n            resizeObserver.observe(EL);\n            window.addEventListener('unload', () => resizeObserver.disconnect());\n          </script>\n        </body>\n      </html>\n    `;\n\n    return getBlobURL(source, 'text/html');\n  };\n\n  useEffect(() => {\n    let url = '';\n    if (ref.current && tilda.content) {\n      // Отзываем предыдущий URL\n      if (ref.current.src.startsWith('blob:')) {\n        URL.revokeObjectURL(ref.current.src);\n      }\n\n      url = getGeneratedPageURL({\n        cssArr: tilda.css,\n        jsArr: tilda.js,\n        id: tilda.promoBlockId,\n      });\n      ref.current.src = url;\n      ref.current.initHTML = () => tilda.content;\n    }\n    return () => {\n      if (url) URL.revokeObjectURL(url);\n    };\n  }, [tilda]);\n\n  useEffect(() => {\n    const handleError = onError\n      ? onError\n      : () => {\n          console.error('Iframe loading failed');\n        };\n    const iframe = ref.current;\n\n    if (iframe) {\n      iframe.addEventListener('error', handleError);\n      return () => iframe.removeEventListener('error', handleError);\n    }\n  }, []);\n\n  return (\n    <div className={className ? className : styles.container}>\n      <iframe\n        ref={ref}\n        style={{ width: '100%' }}\n        id={`iframe${tilda.promoBlockId}`}\n      />\n    </div>\n  );\n};",".container {\n  width: 100%;\n  overflow: hidden;\n}\n"],"mappings":";AAAA,SAAS,WAAW,cAAc;;;ACAlC;;;ADyHM;AA/FC,IAAM,iBAAiB,CAAC,EAAE,OAAO,WAAW,QAAQ,MAAa;AACtE,QAAM,MAAM,OAAsB,IAAI;AAEtC,QAAM,sBAAsB,CAAC,EAAE,QAAQ,OAAO,GAAG,MAAiB;AAChE,UAAM,aAAa,CAAC,MAAc,SAAiB;AACjD,YAAM,OAAO,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC;AACtC,aAAO,IAAI,gBAAgB,IAAI;AAAA,IACjC;AAEA,UAAM,SAAS,CAAC,aACd,SACG,IAAI,SAAO,gDAAgD,GAAG,MAAM,EACpE,KAAK,GAAG;AAEb,UAAM,QAAQ,CAAC,YACb,QACG,IAAI,QAAM,gBAAgB,EAAE,+BAA+B,EAC3D,KAAK,GAAG;AAEb,UAAM,SAAS;AAAA;AAAA;AAAA,YAGP,OAAO,MAAM,CAAC;AAAA,YACd,MAAM,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EAMkD,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BxE,WAAO,WAAW,QAAQ,WAAW;AAAA,EACvC;AAEA,YAAU,MAAM;AACd,QAAI,MAAM;AACV,QAAI,IAAI,WAAW,MAAM,SAAS;AAEhC,UAAI,IAAI,QAAQ,IAAI,WAAW,OAAO,GAAG;AACvC,YAAI,gBAAgB,IAAI,QAAQ,GAAG;AAAA,MACrC;AAEA,YAAM,oBAAoB;AAAA,QACxB,QAAQ,MAAM;AAAA,QACd,OAAO,MAAM;AAAA,QACb,IAAI,MAAM;AAAA,MACZ,CAAC;AACD,UAAI,QAAQ,MAAM;AAClB,UAAI,QAAQ,WAAW,MAAM,MAAM;AAAA,IACrC;AACA,WAAO,MAAM;AACX,UAAI;AAAK,YAAI,gBAAgB,GAAG;AAAA,IAClC;AAAA,EACF,GAAG,CAAC,KAAK,CAAC;AAEV,YAAU,MAAM;AACd,UAAM,cAAc,UAChB,UACA,MAAM;AACJ,cAAQ,MAAM,uBAAuB;AAAA,IACvC;AACJ,UAAM,SAAS,IAAI;AAEnB,QAAI,QAAQ;AACV,aAAO,iBAAiB,SAAS,WAAW;AAC5C,aAAO,MAAM,OAAO,oBAAoB,SAAS,WAAW;AAAA,IAC9D;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SACE,oBAAC,SAAI,WAAW,YAAY,YAAY,8BAAO,WAC7C;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,OAAO,EAAE,OAAO,OAAO;AAAA,MACvB,IAAI,SAAS,MAAM,YAAY;AAAA;AAAA,EACjC,GACF;AAEJ;","names":[]}